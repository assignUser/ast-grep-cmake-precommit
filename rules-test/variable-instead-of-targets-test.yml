id: variable-instead-of-targets
valid:
  # Good practices that should NOT trigger the rule
  - |
    add_library(math_utils src/math.cpp)
    add_library(string_utils src/string.cpp)

    add_executable(myapp src/main.cpp)
    target_link_libraries(myapp PRIVATE math_utils string_utils)
  - |
    # Direct target names are preferred
    target_link_libraries(myapp
        PRIVATE
        target1
        target2
        target3
    )
  # These are now considered valid - find_library results with _LIBRARY/_LIBRARIES suffix
  - |
    find_library(MATH_LIBRARY math)
    target_link_libraries(myapp PRIVATE ${MATH_LIBRARY})
  - |
    find_library(STRING_LIBRARIES string)
    target_link_libraries(myapp PRIVATE ${STRING_LIBRARIES})
  # Path variables are now considered valid
  - |
    target_link_libraries(myapp PRIVATE ${CMAKE_BINARY_DIR}/lib/libfoo.a)
  - |
    target_link_libraries(myapp PRIVATE ${CMAKE_SOURCE_DIR}/external/lib.a)
  - |
    target_link_libraries(myapp PRIVATE ${PROJECT_BINARY_DIR}/lib/custom.so)
  - |
    target_link_libraries(myapp PRIVATE /usr/lib/${ARCH}/libsomething.so)
  # Generator expressions are valid - they should not trigger the rule
  - |
    target_link_libraries(
      test_main
      PUBLIC gtest $<$<BOOL:${BUILD_TRACING}>:perfetto>)
  - |
    target_link_libraries(myapp PRIVATE $<$<CONFIG:Debug>:debug_lib>)
  - |
    target_link_libraries(myapp PUBLIC $<TARGET_NAME:some_target>)
  - |
    target_link_libraries(myapp INTERFACE $<$<PLATFORM_ID:Windows>:ws2_32>)
  - |
    target_link_libraries(myapp PRIVATE regular_target $<$<BOOL:${USE_FEATURE}>:feature_lib>)
invalid:
  # These should trigger the rule - using variables instead of targets
  - |
    set(MATH_LIB math_utils)
    target_link_libraries(myapp PRIVATE ${MATH_LIB})
  - |
    set(STRING_LIB string_utils)
    target_link_libraries(myapp PUBLIC ${STRING_LIB})
  - |
    set(ALL_LIBS math_utils string_utils)
    target_link_libraries(myapp INTERFACE ${ALL_LIBS})
  - |
    set(MYLIB some_target)
    target_link_libraries(myapp ${MYLIB})
  - |
    set(MATH_LIB math_utils)
    set(STRING_LIB string_utils)
    set(ALL_LIBS ${MATH_LIB} ${STRING_LIB})

    add_executable(myapp src/main.cpp)
    target_link_libraries(myapp PRIVATE ${ALL_LIBS})
  - |
    set(TARGET_NAME my_target)
    target_link_libraries(myapp PRIVATE ${TARGET_NAME})
  # Variables ending in _LIB (without _LIBRARY suffix) are still flagged
  - |
    find_library(FOO_LIB foo PATHS /usr/local/lib)
    target_link_libraries(myapp PRIVATE ${FOO_LIB})
