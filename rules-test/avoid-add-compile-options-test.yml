id: avoid-add-compile-options
valid:
  # Good practices that should NOT trigger the rule
  - |
    add_library(mylib SHARED src/mylib.cpp)
    target_compile_options(mylib PRIVATE -Wall -Wextra)
  - |
    add_executable(myapp src/main.cpp)
    target_compile_options(myapp PRIVATE -O2)
  - |
    # Target-specific options with different scopes
    target_compile_options(lib1 PRIVATE -fPIC)
    target_compile_options(lib2 PUBLIC -std=c++17)
    target_compile_options(lib3 INTERFACE -pthread)
  - |
    # Using generator expressions for compiler-specific options
    target_compile_options(mylib PRIVATE
        $<$<COMPILE_LANGUAGE:CXX>:-std=c++17>
        $<$<CXX_COMPILER_ID:GNU>:-Wall>
        $<$<CXX_COMPILER_ID:MSVC>:/W4>
    )
  - |
    # Conditional options
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        target_compile_options(mylib PRIVATE -g -O0)
    endif()
  - |
    # This is just a comment about add_compile_options
    target_compile_options(mylib PRIVATE -Wpedantic)
invalid:
  # These should trigger the rule - directory-wide usage
  - add_compile_options(-Wall)
  - |
    add_compile_options(-Wall -Wextra -Wpedantic)
  - |
    add_compile_options(
        -Wall
        -Wextra
        -O2
    )
  - |
    cmake_minimum_required(VERSION 3.10)
    project(TestProject)
    add_compile_options(-std=c++17)
  - |
    # MSVC style options
    add_compile_options(/W4 /O2)
  - |
    # Using variables
    set(WARNING_FLAGS -Wall -Wextra)
    add_compile_options(${WARNING_FLAGS})
  - |
    # Conditional directory-wide options - still should trigger
    if(MSVC)
        add_compile_options(/W4)
    else()
        add_compile_options(-Wall -Wextra)
    endif()
  - |
    # Mixed usage - still should trigger
    add_library(mylib src/lib.cpp)
    add_compile_options(-fPIC)
    target_compile_options(mylib PRIVATE -Wall)
