id: avoid-include-directories
valid:
  # Good practices that should NOT trigger the rule
  - |
    add_library(mylib SHARED src/mylib.cpp)
    target_include_directories(mylib PRIVATE include/)
  - |
    add_executable(myapp src/main.cpp)
    target_include_directories(myapp PRIVATE include/ external/header-only/)
  - |
    # Target-specific includes with different scopes
    target_include_directories(lib1 PRIVATE src/internal/)
    target_include_directories(lib2 PUBLIC include/public/)
    target_include_directories(lib3 INTERFACE include/interface/)
  - |
    # Using generator expressions
    target_include_directories(mylib PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
    )
  - |
    # System includes
    target_include_directories(mylib SYSTEM PRIVATE /usr/local/include)
  - |
    # Multiple directories
    target_include_directories(mylib PRIVATE
        include/
        src/internal/
        ${CMAKE_BINARY_DIR}/generated/
    )
  - |
    # This is just a comment about include_directories
    target_include_directories(mylib PRIVATE include/)
invalid:
  # These should trigger the rule - directory-wide usage
  - include_directories(include/)
  - |
    include_directories(include/ src/)
  - |
    include_directories(
        include/
        external/
        ${CMAKE_SOURCE_DIR}/third_party/
    )
  - |
    cmake_minimum_required(VERSION 3.10)
    project(TestProject)
    include_directories(include/)
  - |
    # SYSTEM includes
    include_directories(SYSTEM /usr/local/include)
  - |
    # BEFORE/AFTER options
    include_directories(BEFORE include/)
    include_directories(AFTER external/)
  - |
    # Using variables
    set(INC_DIRS include/ src/)
    include_directories(${INC_DIRS})
  - |
    # Mixed usage - still should trigger
    add_library(mylib src/lib.cpp)
    include_directories(include/)
    target_include_directories(mylib PRIVATE src/)
